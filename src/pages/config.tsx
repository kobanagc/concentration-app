import Head from 'next/head';
import { useRouter } from 'next/router';
import styles from '@/styles/Config.module.css';
import { useState } from 'react';
import fs from 'fs';
import path from 'path';

const Config = () => {
  const [numPlayers, setNumPlayers] = useState(2);
  const [includeJoker, setIncludeJoker] = useState(false);
  const [numCards, setNumCards] = useState(20);
  const [playerNames, setPlayerNames] = useState<string[]>(Array(numPlayers).fill(''));
  const [selectedImages, setSelectedImages] = useState<File[]>([]);
  const router = useRouter();

  const handleNumPlayersChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const value = parseInt(event.target.value);
    setNumPlayers(value);
    setPlayerNames(Array(value).fill(''));
  };

  const handlePlayerNameChange = (index: number, event: React.ChangeEvent<HTMLInputElement>) => {
    const value = event.target.value;
    setPlayerNames((prevNames) => {
      const newNames = [...prevNames];
      newNames[index] = value;
      return newNames;
    });
  };

  const handleImageUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const fileList = Array.from(files);
      setSelectedImages(fileList);
    }
  };

  const handleSubmit = (event: React.FormEvent) => {
    event.preventDefault();
    // プレイ画面に遷移する処理を追加
    const formData = {
      numPlayers,
      includeJoker,
      numCards,
      playerNames,
      selectedImages,
    };
    localStorage.setItem('gameData', JSON.stringify(formData));
    router.push('/game');
  };

  return (
    <>
      <Head>
        <title>Config</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className={styles.settings}>
        <h1 className={styles.title}>Settings</h1>
        <form onSubmit={handleSubmit}>
          <label>
            Number of Players:
            <input
              type="number"
              value={numPlayers}
              onChange={handleNumPlayersChange}
              min="2"
              max="10"
              className={styles.input}
            />
          </label>

          <label>
            Include Joker:
            <input
              type="checkbox"
              checked={includeJoker}
              onChange={() => setIncludeJoker(!includeJoker)}
              className={styles.checkbox}
            />
          </label>

          <label>
            Number of Pairs:
            <input
              type="number"
              value={numCards}
              onChange={(event) => setNumCards(parseInt(event.target.value))}
              min="10"
              className={styles.input}
            />
          </label>

          <h2 className={styles.subtitle}>Player Names:</h2>
          {playerNames.map((name, index) => (
            <label key={index} className={styles.label}>
              Player {index + 1}:
              <input
                type="text"
                value={name}
                onChange={(event) => handlePlayerNameChange(index, event)}
                required
                className={styles.input}
              />
            </label>
          ))}

          <h2 className={styles.subtitle}>Card Images:</h2>
          <input
            type="file"
            accept="image/*"
            multiple
            onChange={handleImageUpload}
            className={styles.fileInput}
          />

          <button type="submit" className={styles.button}>
            Start Game
          </button>
        </form>
      </div>
    </>
  );
};

export default Config;
