import { useEffect, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import styles from '@/styles/Game.module.css';
import Link from 'next/link'

const Game = () => {
  const [playerNames, setPlayerNames] = useState<string[]>([]);
  const [pairs, setPairs] = useState<number>(0);
  const [includeJoker, setIncludeJoker] = useState<boolean>(false);
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0);
  const [flippedCards, setFlippedCards] = useState<number[]>([]);
  const [matchedCards, setMatchedCards] = useState<number[]>([]);
  const [isMismatchModalOpen, setIsMismatchModalOpen] = useState<boolean>(false);
  const [isEndModalOpen, setIsEndModalOpen] = useState<boolean>(false);
  const [playerScores, setPlayerScores] = useState<number[]>([]);
  const [scoreDisplay, setScoreDisplay] = useState<boolean>(true);
  const [cardIds, setCardIds] = useState<number[]>([]);

  useEffect(() => {
    // ゲームデータをローカルストレージから取得
    const gameData = localStorage.getItem('gameData');
    if (gameData) {
      const { numPlayers, numPairs, includeJoker, playerNames } = JSON.parse(gameData);
      setPlayerNames(playerNames);
      setPairs(numPairs);
      setIncludeJoker(includeJoker);
    }
  }, []);

  useEffect(() => {
    // playerNamesが入った状態でplayerScoresを初期化
    setPlayerScores(Array(playerNames.length).fill(0));
  }, [playerNames]);

  useEffect(() => {
    setCardIds(shuffleArray(Array(pairs * 2).fill(0).map((_, index) => generateCardId(index))));
  }, [pairs]);

  useEffect(() => {
    if (matchedCards.length === pairs * 2) {
      setIsEndModalOpen(true);
    }
  }, [matchedCards, pairs]);

  useEffect(() => {
    setIsEndModalOpen(false);
  }, []);

  const generateCardId = (index: number): number => {
    // カードIDを生成するロジック（例：1からpairsまでの連番）
    return index % pairs + 1;
  };

  const getCardImagePath = (cardId: number): string => {
    const cardNumber = includeJoker ? cardId + 1 : cardId;
    return `/card${cardNumber}.png`;
  };

  function shuffleArray<T>(array: T[]): T[] {
    const result = [...array];
    for (let i = result.length - 1; i > 0; i--) {
      const j = Math.floor(Math.random() * (i + 1));
      [result[i], result[j]] = [result[j], result[i]];
    }
    return result;
  }

  const flipCard = (index: number) => {
    if (matchedCards.includes(index)) {
      return;
    }
    if (flippedCards.length === 2) {
      return;
    }
    if (flippedCards.includes(index)) {
      return;
    }
    setFlippedCards((prevCards) => [...prevCards, index]);

    if (flippedCards.length === 1) {
      const firstCardIndex = flippedCards[0];
      const firstCardId = cardIds[firstCardIndex];
      const currentCardId = cardIds[index];

      if (firstCardId === currentCardId) {
        setMatchedCards((prevCards) => [...prevCards, firstCardIndex, index]);
        setFlippedCards([]);
        // スコアを更新
        const newPlayerScores = [...playerScores];
        newPlayerScores[currentPlayerIndex]++;
        setPlayerScores(newPlayerScores);
      } else {
        setIsMismatchModalOpen(true); // モーダルを表示する
      }
    }
  };

  const closeMismatchModal = () => {
    setFlippedCards([]);
    setIsMismatchModalOpen(false);
    const nextPlayerIndex = (currentPlayerIndex + 1) % playerNames.length;
    setCurrentPlayerIndex(nextPlayerIndex);
  };

  const getScoreText = (score: number): string => {
    if (scoreDisplay === false) {
      return '???';
    }
    if (score === 0) {
      return '0 pair';
    } else if (score === 1) {
      return `${score} pair`;
    } else {
      return `${score} pairs`;
    }
  };

  const changeScoreDisplay = () => {
    setScoreDisplay((prevDisplay) => !prevDisplay);
  };

  const resetGame = () => {
    const newCardIds = shuffleArray(Array(pairs * 2).fill(0).map((_, index) => generateCardId(index)));
    setCardIds(newCardIds);
    setCurrentPlayerIndex(0);
    setFlippedCards([]);
    setMatchedCards([]);
    setPlayerScores(Array(playerNames.length).fill(0));
    setIsMismatchModalOpen(false);
    setIsEndModalOpen(false);
  };

  return (
    <>
      <Head>
        <title>Game</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className={styles.game}>
        <div className={styles.currentPlayer}>
          <h2>Current Player:</h2>
          <p>{playerNames[currentPlayerIndex]}</p>
        </div>
        <div className={styles.playerNames}>
          <h2>Players:</h2>
          {playerNames.map((name, index) => (
            <p key={index}>
              {name} (Score: {getScoreText(playerScores[index])})
            </p>
          ))}
        </div>
        <div>
          <button onClick={changeScoreDisplay}>
            {scoreDisplay ? 'スコアを隠す' : 'スコアを表示'}
          </button>
        </div>
        {isMismatchModalOpen && (
          <div className={styles.modal}>
            <div className={styles.modalContent}>
              <p>ざんね〜んm9(^Д^)</p>
              <button onClick={closeMismatchModal}>カードを戻す</button>
            </div>
          </div>
        )}
        {isEndModalOpen && (
          <div className={styles.modal}>
            <div className={styles.modalContent}>
              {(() => {
                const maxScore = Math.max(...playerScores);
                const winners = playerNames.filter((_, index) => playerScores[index] === maxScore);

                if (winners.length === playerNames.length) {
                  return <h2>Draw...</h2>;
                }

                return <h2>Winner: {winners.join(", ")}</h2>;
              })()}
              <button onClick={resetGame}>同じ設定で遊ぶ</button>
              <Link href="/config">
                <button>設定を変更する</button>
              </Link>
            </div>
          </div>
        )}
        <div className={styles.cardGrid}>
          {cardIds.map((cardId, index) => {
            const isFlipped = flippedCards.includes(index);
            const isMatched = matchedCards.includes(index);
            const imagePath = isFlipped || isMatched ? getCardImagePath(cardId) : '/mark_question.png';

            return (
              <div key={index} className={styles.card} onClick={() => flipCard(index)}>
                <Image
                  src={imagePath}
                  alt="Card"
                  className={isFlipped ? styles.flipped : ''}
                  width={100}
                  height={150}
                />
              </div>
            );
          })}
        </div>
      </div>
    </>
  );
};

export default Game;
