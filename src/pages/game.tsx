import Head from 'next/head'
import { useEffect, useState } from 'react';
import styles from '@/styles/Game.module.css';

const Game = () => {
  const [playerNames, setPlayerNames] = useState<string[]>([]);
  const [cardImages, setCardImages] = useState<string[]>([]);

  useEffect(() => {
    // プレイヤー名とカード画像の読み込み処理を実装
    const storedPlayerNames = JSON.parse(localStorage.getItem('playerNames') || '[]');
    const storedCardImages = JSON.parse(localStorage.getItem('cardImages') || '[]');
    setPlayerNames(storedPlayerNames);
    setCardImages(storedCardImages);
  }, []);

  // プレイヤーごとの獲得枚数
  const [playerScores, setPlayerScores] = useState<number[]>(Array(playerNames.length).fill(0));

  // カードが選択されたかどうかの状態
  const [selectedCards, setSelectedCards] = useState<boolean[]>(Array(cardImages.length).fill(false));

  // カードの選択状態を更新する関数
  const updateSelectedCards = (index: number) => {
    setSelectedCards((prevSelectedCards) => {
      const newSelectedCards = [...prevSelectedCards];
      newSelectedCards[index] = !newSelectedCards[index];
      return newSelectedCards;
    });
  };

  // カードがすべて取られたかどうかの判定
  const isAllCardsTaken = () => {
    return selectedCards.every((card) => card === true);
  };

  // プレイヤーごとの獲得枚数を更新する関数
  const updatePlayerScore = (playerIndex: number) => {
    setPlayerScores((prevPlayerScores) => {
      const newPlayerScores = [...prevPlayerScores];
      newPlayerScores[playerIndex]++;
      return newPlayerScores;
    });
  };

  // プレイヤーごとの獲得枚数をリセットする関数
  const resetPlayerScores = () => {
    setPlayerScores(Array(playerNames.length).fill(0));
  };

  // プレイヤーごとの獲得枚数を表示する要素の表示・非表示を制御する状態
  const [showScores, setShowScores] = useState(false);

  return (
    <>
      <Head>
        <title>Play</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className={styles.play}>
        <h1 className={styles.title}>Play</h1>
        <div className={styles.playerScores}>
          {showScores &&
            playerNames.map((playerName, index) => (
              <p key={index} className={styles.playerScore}>
                {playerName}: {playerScores[index]}
              </p>
            ))}
        </div>
        <div className={styles.cardContainer}>
          {cardImages.map((image, index) => (
            <div
              key={index}
              className={`${styles.card} ${selectedCards[index] ? styles.selectedCard : ''}`}
              onClick={() => {
                if (!selectedCards[index]) {
                  updateSelectedCards(index);
                  updatePlayerScore(index % playerNames.length);
                  if (isAllCardsTaken()) {
                    // カードがすべて取られた場合の処理を追加
                  }
                }
              }}
            >
              <img src={image} alt="card" className={styles.cardImage} />
            </div>
          ))}
        </div>
        <button
          className={styles.scoreButton}
          onClick={() => {
            setShowScores(!showScores);
          }}
        >
          {showScores ? 'Hide Scores' : 'Show Scores'}
        </button>
        <button className={styles.resetButton} onClick={resetPlayerScores}>
          Reset Scores
        </button>
      </div>
    </>
  );
};

export default Game;
