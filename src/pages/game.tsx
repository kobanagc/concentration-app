import { useEffect, useState } from 'react';
import Head from 'next/head';
import styles from '@/styles/Game.module.css';

const Game = () => {
  const [playerNames, setPlayerNames] = useState<string[]>([]);
  const [pairs, setPairs] = useState<number>(0);
  const [includeJoker, setIncludeJoker] = useState<boolean>(false);
  const [selectedImages, setSelectedImages] = useState<string[]>([]);
  const [currentPlayerIndex, setCurrentPlayerIndex] = useState<number>(0);

  useEffect(() => {
    // ゲームデータをローカルストレージから取得
    const gameData = localStorage.getItem('gameData');
    if (gameData) {
      const { numPlayers, numPairs, includeJoker, playerNames, selectedImages } = JSON.parse(gameData);
      setPlayerNames(playerNames);
      setPairs(numPairs);
      setIncludeJoker(includeJoker);
      setSelectedImages(selectedImages.map((file: File) => URL.createObjectURL(file)));
    }
  }, []);

  // カードの画像ファイルパスを生成する関数
  const getCardImagePath = (index: number): string => {
    const cardNumber = includeJoker ? index + 1 : index % pairs + 1;
    return `/card${cardNumber}.png`;
  };

  // カードのめくられた後の状態を表すステート
  const [flippedCards, setFlippedCards] = useState<number[]>([]);

  // プレイヤーの得点を表すステート
  const [playerScores, setPlayerScores] = useState<number[]>(Array(playerNames.length).fill(0));

  // カードをめくるアクション
  const flipCard = (index: number) => {
    // 既にめくられたカードの場合は何もしない
    if (flippedCards.includes(index)) {
      return;
    }

    // カードのめくられた状態を更新
    setFlippedCards((prevCards) => [...prevCards, index]);

    // 次のプレイヤーの順番に移動
    setCurrentPlayerIndex((prevIndex) => (prevIndex + 1) % playerNames.length);

    // カードの絵柄を取得
    const cardImage = selectedImages[index];

    // プレイヤーの得点をチェック
    const flippedIndices = flippedCards.concat(index);
    const sameFlippedIndices = flippedIndices.filter((i) => selectedImages[i] === cardImage);
    if (sameFlippedIndices.length === 2) {
      // 同じ絵柄のカードがめくられた場合、得点をプレイヤーに加算
      const currentPlayerScore = playerScores[currentPlayerIndex];
      const updatedScores = [...playerScores];
      updatedScores[currentPlayerIndex] = currentPlayerScore + 1;
      setPlayerScores(updatedScores);
    }
  };

  return (
    <>
      <Head>
        <title>Game</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
      </Head>
      <div className={styles.game}>
        <h1>Game Screen</h1>
        <div className={styles.currentPlayer}>
          <h2>Current Player:</h2>
          <p>{playerNames[currentPlayerIndex]}</p>
        </div>
        <div className={styles.playerNames}>
          <h2>Player Names:</h2>
          {playerNames.map((name, index) => (
            <p key={index}>Player {index + 1}: {name} (Score: {playerScores[index]})</p>
          ))}
        </div>
        <div className={styles.cardGrid}>
          {Array(pairs * 2).fill(0).map((_, index) => {
            const isFlipped = flippedCards.includes(index);
            const imagePath = isFlipped ? getCardImagePath(index) : '/mark_question.png';

            return (
              <div key={index} className={styles.card} onClick={() => flipCard(index)}>
                <img src={imagePath} alt="Card" className={isFlipped ? styles.flipped : ''} />
              </div>
            );
          })}
        </div>
      </div>
    </>
  );
};

export default Game;
